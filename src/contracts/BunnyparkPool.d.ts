/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BunnyparkPoolInterface extends ethers.utils.Interface {
  functions: {
    "BPPerBlock()": FunctionFragment;
    "CAKE_MASTER_CHEF()": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "bpToken()": FunctionFragment;
    "cake()": FunctionFragment;
    "cakeRecipientAddress()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getBPReward(uint256)": FunctionFragment;
    "getBPRewardByBlockNumber(uint256,uint256)": FunctionFragment;
    "harvestAllCake()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingBPByBlockNumber(address,uint256)": FunctionFragment;
    "pendingReward(address)": FunctionFragment;
    "phase()": FunctionFragment;
    "phaseByBlockNumber(uint256)": FunctionFragment;
    "phasePeriod()": FunctionFragment;
    "poolInfo()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reward()": FunctionFragment;
    "rewardByBlockNumber(uint256)": FunctionFragment;
    "setBPPerBlock(uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BPPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAKE_MASTER_CHEF",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(functionFragment: "bpToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "cake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cakeRecipientAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBPReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBPRewardByBlockNumber",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestAllCake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingBPByBlockNumber",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "phase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phaseByBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "phasePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardByBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBPPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BPPerBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CAKE_MASTER_CHEF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cakeRecipientAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBPReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBPRewardByBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestAllCake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingBPByBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "phase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phaseByBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phasePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardByBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBPPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetBPPerBlock(address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBPPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class BunnyparkPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BunnyparkPoolInterface;

  functions: {
    BPPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    bpToken(overrides?: CallOverrides): Promise<[string]>;

    cake(overrides?: CallOverrides): Promise<[string]>;

    cakeRecipientAddress(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBPReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBPRewardByBlockNumber(
      _lastRewardBlock: BigNumberish,
      currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvestAllCake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingBPByBlockNumber(
      _user: string,
      currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    phase(overrides?: CallOverrides): Promise<[BigNumber]>;

    phaseByBlockNumber(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ret: BigNumber }>;

    phasePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        lastRewardBlock: BigNumber;
        accBPPerShare: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reward(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardByBlockNumber(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBPPerBlock(
      _BPPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BPPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  bpToken(overrides?: CallOverrides): Promise<string>;

  cake(overrides?: CallOverrides): Promise<string>;

  cakeRecipientAddress(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBPReward(
    _lastRewardBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBPRewardByBlockNumber(
    _lastRewardBlock: BigNumberish,
    currentBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestAllCake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingBPByBlockNumber(
    _user: string,
    currentBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  phase(overrides?: CallOverrides): Promise<BigNumber>;

  phaseByBlockNumber(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  phasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      supply: BigNumber;
      lastRewardBlock: BigNumber;
      accBPPerShare: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reward(overrides?: CallOverrides): Promise<BigNumber>;

  rewardByBlockNumber(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBPPerBlock(
    _BPPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BPPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    bpToken(overrides?: CallOverrides): Promise<string>;

    cake(overrides?: CallOverrides): Promise<string>;

    cakeRecipientAddress(overrides?: CallOverrides): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getBPReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBPRewardByBlockNumber(
      _lastRewardBlock: BigNumberish,
      currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestAllCake(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingBPByBlockNumber(
      _user: string,
      currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    phase(overrides?: CallOverrides): Promise<BigNumber>;

    phaseByBlockNumber(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        lastRewardBlock: BigNumber;
        accBPPerShare: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardByBlockNumber(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBPPerBlock(
      _BPPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Deposit(
      user?: string | null,
      amount?: null,
      havestAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; havestAmount: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    SetBPPerBlock(
      user?: string | null,
      bpPerBlock?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; bpPerBlock: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      amount?: null,
      havestAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; havestAmount: BigNumber }
    >;
  };

  estimateGas: {
    BPPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    bpToken(overrides?: CallOverrides): Promise<BigNumber>;

    cake(overrides?: CallOverrides): Promise<BigNumber>;

    cakeRecipientAddress(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBPReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBPRewardByBlockNumber(
      _lastRewardBlock: BigNumberish,
      currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestAllCake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingBPByBlockNumber(
      _user: string,
      currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    phase(overrides?: CallOverrides): Promise<BigNumber>;

    phaseByBlockNumber(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardByBlockNumber(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBPPerBlock(
      _BPPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cakeRecipientAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBPReward(
      _lastRewardBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBPRewardByBlockNumber(
      _lastRewardBlock: BigNumberish,
      currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestAllCake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingBPByBlockNumber(
      _user: string,
      currentBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    phaseByBlockNumber(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phasePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardByBlockNumber(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBPPerBlock(
      _BPPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
